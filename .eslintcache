[{"/Users/tpmanc/Sites/backup-frontend/src/index.js":"1","/Users/tpmanc/Sites/backup-frontend/src/App.js":"2","/Users/tpmanc/Sites/backup-frontend/src/reportWebVitals.js":"3","/Users/tpmanc/Sites/backup-frontend/src/components/app-bar.js":"4","/Users/tpmanc/Sites/backup-frontend/src/pages/index.js":"5","/Users/tpmanc/Sites/backup-frontend/src/pages/projects.js":"6","/Users/tpmanc/Sites/backup-frontend/src/api/client.js":"7","/Users/tpmanc/Sites/backup-frontend/src/store/store.js":"8","/Users/tpmanc/Sites/backup-frontend/src/store/reducer.js":"9","/Users/tpmanc/Sites/backup-frontend/src/store/projects/reducer.js":"10","/Users/tpmanc/Sites/backup-frontend/src/store/projects/actions.js":"11","/Users/tpmanc/Sites/backup-frontend/src/store/projects/const.js":"12","/Users/tpmanc/Sites/backup-frontend/src/pages/project-view.js":"13","/Users/tpmanc/Sites/backup-frontend/src/store/project-view/reducer.js":"14","/Users/tpmanc/Sites/backup-frontend/src/store/project-view/const.js":"15","/Users/tpmanc/Sites/backup-frontend/src/store/project-view/actions.js":"16","/Users/tpmanc/Sites/backup-frontend/src/store/servers/reducer.js":"17","/Users/tpmanc/Sites/backup-frontend/src/store/servers/const.js":"18","/Users/tpmanc/Sites/backup-frontend/src/store/servers/actions.js":"19","/Users/tpmanc/Sites/backup-frontend/src/store/server/reducer.js":"20","/Users/tpmanc/Sites/backup-frontend/src/store/server/const.js":"21","/Users/tpmanc/Sites/backup-frontend/src/pages/server-view.js":"22","/Users/tpmanc/Sites/backup-frontend/src/store/server/actions.js":"23","/Users/tpmanc/Sites/backup-frontend/src/store/databases/reducer.js":"24","/Users/tpmanc/Sites/backup-frontend/src/store/databases/const.js":"25","/Users/tpmanc/Sites/backup-frontend/src/store/databases/actions.js":"26","/Users/tpmanc/Sites/backup-frontend/src/store/files/actions.js":"27","/Users/tpmanc/Sites/backup-frontend/src/store/files/const.js":"28","/Users/tpmanc/Sites/backup-frontend/src/store/files/reducer.js":"29","/Users/tpmanc/Sites/backup-frontend/src/pages/database-view.js":"30","/Users/tpmanc/Sites/backup-frontend/src/pages/files-view.js":"31","/Users/tpmanc/Sites/backup-frontend/src/store/database-backups/reducer.js":"32","/Users/tpmanc/Sites/backup-frontend/src/store/database-backups/actions.js":"33","/Users/tpmanc/Sites/backup-frontend/src/store/database-backups/const.js":"34","/Users/tpmanc/Sites/backup-frontend/src/store/files-backups/reducer.js":"35","/Users/tpmanc/Sites/backup-frontend/src/store/files-backups/const.js":"36","/Users/tpmanc/Sites/backup-frontend/src/store/files-backups/actions.js":"37","/Users/tpmanc/Sites/backup-frontend/src/store/profile/reducer.js":"38","/Users/tpmanc/Sites/backup-frontend/src/store/profile/const.js":"39","/Users/tpmanc/Sites/backup-frontend/src/pages/login.js":"40","/Users/tpmanc/Sites/backup-frontend/src/store/profile/actions.js":"41","/Users/tpmanc/Sites/backup-frontend/src/helpers/jwtHelper.js":"42","/Users/tpmanc/Sites/backup-frontend/src/helpers/axios-helper.js":"43","/Users/tpmanc/Sites/backup-frontend/src/components/auth-route.js":"44","/Users/tpmanc/Sites/backup-frontend/src/components/app-sidebar/sidebar.js":"45","/Users/tpmanc/Sites/backup-frontend/src/env.js":"46","/Users/tpmanc/Sites/backup-frontend/src/components/echo.js":"47"},{"size":620,"mtime":1610392279516,"results":"48","hashOfConfig":"49"},{"size":2181,"mtime":1611066362761,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":1610316338726,"results":"51","hashOfConfig":"49"},{"size":703,"mtime":1610355645456,"results":"52","hashOfConfig":"49"},{"size":110,"mtime":1610356722203,"results":"53","hashOfConfig":"49"},{"size":5714,"mtime":1610823398547,"results":"54","hashOfConfig":"49"},{"size":148,"mtime":1611056774869,"results":"55","hashOfConfig":"49"},{"size":234,"mtime":1610394034480,"results":"56","hashOfConfig":"49"},{"size":888,"mtime":1610880363971,"results":"57","hashOfConfig":"49"},{"size":2967,"mtime":1610808569831,"results":"58","hashOfConfig":"49"},{"size":2965,"mtime":1610916689080,"results":"59","hashOfConfig":"49"},{"size":584,"mtime":1610808472059,"results":"60","hashOfConfig":"49"},{"size":8105,"mtime":1610823666562,"results":"61","hashOfConfig":"49"},{"size":1310,"mtime":1610794925185,"results":"62","hashOfConfig":"49"},{"size":214,"mtime":1610794924225,"results":"63","hashOfConfig":"49"},{"size":1158,"mtime":1610807503800,"results":"64","hashOfConfig":"49"},{"size":2957,"mtime":1610799499723,"results":"65","hashOfConfig":"49"},{"size":552,"mtime":1610799014841,"results":"66","hashOfConfig":"49"},{"size":3129,"mtime":1610799419368,"results":"67","hashOfConfig":"49"},{"size":920,"mtime":1610810515262,"results":"68","hashOfConfig":"49"},{"size":163,"mtime":1610809681237,"results":"69","hashOfConfig":"49"},{"size":15293,"mtime":1610823422760,"results":"70","hashOfConfig":"49"},{"size":1001,"mtime":1610809790381,"results":"71","hashOfConfig":"49"},{"size":2881,"mtime":1610811628983,"results":"72","hashOfConfig":"49"},{"size":733,"mtime":1610821170566,"results":"73","hashOfConfig":"49"},{"size":4274,"mtime":1610821420725,"results":"74","hashOfConfig":"49"},{"size":4090,"mtime":1610821476799,"results":"75","hashOfConfig":"49"},{"size":637,"mtime":1610821416047,"results":"76","hashOfConfig":"49"},{"size":2644,"mtime":1610817896296,"results":"77","hashOfConfig":"49"},{"size":2859,"mtime":1610827917912,"results":"78","hashOfConfig":"49"},{"size":2842,"mtime":1611059949399,"results":"79","hashOfConfig":"49"},{"size":878,"mtime":1610826291627,"results":"80","hashOfConfig":"49"},{"size":1128,"mtime":1610827554651,"results":"81","hashOfConfig":"49"},{"size":223,"mtime":1610825948555,"results":"82","hashOfConfig":"49"},{"size":857,"mtime":1610827810983,"results":"83","hashOfConfig":"49"},{"size":205,"mtime":1610827793211,"results":"84","hashOfConfig":"49"},{"size":1086,"mtime":1610827850686,"results":"85","hashOfConfig":"49"},{"size":2177,"mtime":1611000101910,"results":"86","hashOfConfig":"49"},{"size":721,"mtime":1610880080403,"results":"87","hashOfConfig":"49"},{"size":2379,"mtime":1610881505735,"results":"88","hashOfConfig":"49"},{"size":3716,"mtime":1611000049090,"results":"89","hashOfConfig":"49"},{"size":354,"mtime":1610896092514,"results":"90","hashOfConfig":"49"},{"size":1191,"mtime":1610917757259,"results":"91","hashOfConfig":"49"},{"size":374,"mtime":1610918044781,"results":"92","hashOfConfig":"49"},{"size":3069,"mtime":1611000381983,"results":"93","hashOfConfig":"49"},{"size":45,"mtime":1611056741482,"results":"94","hashOfConfig":"49"},{"size":1062,"mtime":1611140070742,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1632d9i",{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"98"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"98"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"98"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"98"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"98"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"98"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"98"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tpmanc/Sites/backup-frontend/src/index.js",[],["212","213"],"/Users/tpmanc/Sites/backup-frontend/src/App.js",["214","215","216"],"import React from 'react'\nimport { useEffect } from 'react'\nimport './App.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\"\nimport AuthRoute from './components/auth-route'\nimport AppSidebar from './components/app-sidebar/sidebar'\nimport AppEcho from './components/echo'\nimport IndexPage from './pages/index'\nimport Projects from './pages/projects'\nimport ProjectView from './pages/project-view'\nimport ServerView from './pages/server-view'\nimport DatabaseView from './pages/database-view'\nimport FilesView from './pages/files-view'\nimport LoginPage from './pages/login'\nimport { profileLoad } from './store/profile/actions'\n\nimport 'rsuite/dist/styles/rsuite-default.css'\nimport { Container } from 'rsuite'\nimport { Content } from 'rsuite'\n\nfunction App() {\n  const dispatch = useDispatch()\n  // const history = useHistory()\n  const profile = useSelector(state => state.profile.profile)\n\n  useEffect(() => {\n    dispatch(\n      profileLoad(\n        () => {},\n        err => {},\n      )\n    )\n  }, [])\n\n  const contentStyles = {\n    padding: 20,\n  }\n\n  return (\n    <div className=\"show-fake-browser sidebar-page\">\n      <Router>\n        <Container>\n          <AppSidebar />\n\n          <Container>\n            <Content style={contentStyles}>\n              <Switch>\n                <Route path=\"/login\">\n                  <LoginPage />\n                </Route>\n                <AuthRoute authed={profile !== null} path='/projects' component={Projects} />\n                <AuthRoute authed={profile !== null} path='/project/:id' component={ProjectView} />\n                <AuthRoute authed={profile !== null} path='/server/:id' component={ServerView} />\n                <AuthRoute authed={profile !== null} path='/database/:id' component={DatabaseView} />\n                <AuthRoute authed={profile !== null} path='/files/:id' component={FilesView} />\n                <AuthRoute authed={profile !== null} path='/' component={IndexPage} />\n              </Switch>\n            </Content>\n          </Container>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tpmanc/Sites/backup-frontend/src/reportWebVitals.js",[],"/Users/tpmanc/Sites/backup-frontend/src/components/app-bar.js",[],["217","218"],"/Users/tpmanc/Sites/backup-frontend/src/pages/index.js",[],"/Users/tpmanc/Sites/backup-frontend/src/pages/projects.js",["219"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory, Link } from \"react-router-dom\"\nimport { projectsLoad, projectSave, projectDelete } from '../store/projects/actions'\n\nimport { Loader } from 'rsuite'\nimport { Drawer } from 'rsuite'\nimport { Table } from 'rsuite'\nimport { Icon } from 'rsuite'\nimport { Button, IconButton } from 'rsuite'\nimport { Panel } from 'rsuite'\nimport { Notification } from 'rsuite'\nimport { Placeholder } from 'rsuite'\nimport { Divider } from 'rsuite'\nimport { Form, FormGroup, FormControl, ControlLabel, HelpBlock } from 'rsuite'\n\nexport default function Projects() {\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const { Column, HeaderCell, Cell } = Table\n\n    const postStatus = useSelector(state => state.projects.status)\n    const projects = useSelector(state => state.projects.items)\n\n    const requestStatus = useSelector(state => state.projects.saveStatus)\n    \n    const [ drawerOpen, setDrawerOpen ] = useState(false)\n    const [ drawerTitle, setDrawerTitle ] = useState('')\n    const [ id, setId ] = useState(0)\n    const [ title, setTitle ] = useState('')\n\n    useEffect(() => {\n        if (postStatus === 'init') {\n            dispatch(\n                projectsLoad()\n            )\n        }\n    })\n\n    const deleteProject = (id) => {\n        dispatch(\n            projectDelete(\n                id,\n                () => {},\n                onError,\n            )\n        )\n    }\n\n    const renderTable = () => {\n        return <Table\n            height={400}\n            data={projects}\n            onRowClick={data => {\n                //history.push(`/project/${data.id}`)\n            }}\n        >\n            <Column width={70} align=\"center\">\n            <HeaderCell>Id</HeaderCell>\n            <Cell dataKey=\"id\" />\n            </Column>\n\n            <Column flexGrow={1}>\n            <HeaderCell>Title</HeaderCell>\n            <Cell dataKey=\"title\" />\n            </Column>\n\n            <Column width={200} fixed=\"right\">\n            <HeaderCell>Action</HeaderCell>\n\n            <Cell>\n                {rowData => {\n                function editAction() {\n                    setId(rowData.id)\n                    setTitle(rowData.title)\n                    setDrawerTitle('Edit Project')\n                    openDrawer()\n                }\n                function deleteAction() {\n                    deleteProject(rowData.id)\n                }\n                return (\n                    <span>\n                        <IconButton size=\"xs\" icon={ <Icon icon=\"eye\"/> } componentClass={Link} to={`/project/${rowData.id}`} />{' '}\n                        <IconButton size=\"xs\" icon={ <Icon icon=\"edit\"/> } onClick={editAction} />{' '}\n                        <IconButton size=\"xs\" icon={ <Icon icon=\"trash2\"/> } onClick={deleteAction} />\n                    </span>\n                );\n                }}\n            </Cell>\n            </Column>\n        </Table>\n    }\n\n    const addProject = () => {\n        setDrawerTitle('Add Project')\n        openDrawer()\n    }\n    const openDrawer = () => {\n        setDrawerOpen(true)\n    }\n    const closeDrawer = () => {\n        setId(0)\n        setTitle('')\n    \n        setDrawerOpen(false)\n    }\n    const onTitleChanged = value => setTitle(value)\n    const saveProject = () => {\n        dispatch(\n            projectSave(\n                {\n                    id,\n                    title,\n                },\n                () => {\n                    closeDrawer()\n                    setTitle('')\n                    setId(0)\n                    Notification.success({\n                        title: 'Success!',\n                        placement: 'topStart',\n                        description: 'Project Saved',\n                    })\n                },\n                onError\n            )\n        )\n    }\n    const onError = (message) => {\n        Notification.error({\n            title: 'Error!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n\n    return (\n        <div>\n            <h3>My Projects</h3>\n\n            <Panel bordered>\n                <Button onClick={addProject} color=\"green\">\n                    Add Project\n                </Button>\n\n                <Divider />\n\n                {\n                    (postStatus === 'loading' || postStatus === 'init')\n                        ? <Placeholder.Paragraph rows={5} rowHeight={42} rowMargin={0}>\n                            <Loader center backdrop content=\"loading\" size=\"md\" />\n                        </Placeholder.Paragraph>\n                        : renderTable()\n                }\n            </Panel>\n\n            <Drawer\n                show={drawerOpen}\n                onHide={closeDrawer}\n            >\n                <Drawer.Header>\n                    <Drawer.Title>{ drawerTitle }</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <Form fluid>\n                        <FormGroup>\n                            <ControlLabel>Project Title</ControlLabel>\n                            <FormControl name=\"name\" placeholder=\"Title Input\" onChange={onTitleChanged} value={title} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                    </Form>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={saveProject} appearance=\"primary\" loading={requestStatus === 'processing'}>Save</Button>\n                    <Button onClick={closeDrawer} appearance=\"subtle\">Cancel</Button>\n                </Drawer.Footer>\n            </Drawer>\n        </div>\n    )\n}","/Users/tpmanc/Sites/backup-frontend/src/api/client.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/store.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/reducer.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/projects/reducer.js",["220","221"],"import {\n    PROJECTS_INIT,\n    PROJECTS_LOAD_START,\n    PROJECTS_LOAD_SUCCESS,\n    PROJECTS_SAVE_START,\n    PROJECTS_SAVE_SUCCESS,\n    PROJECTS_SAVE_ERROR,\n    PROJECTS_DELETE_START,\n    PROJECTS_DELETE_SUCCESS,\n    PROJECTS_DELETE_ERROR,\n} from './const'\n\nconst initialState = {\n    status: 'init',\n    items: [],\n    saveStatus: 'ok',\n    deleteStatus: 'ok',\n}\n\nexport function projectsReducer(state = initialState, action) {\n    // The reducer normally looks at the action type field to decide what happens\n    switch (action.type) {\n        case PROJECTS_INIT: {\n            return {\n                ...state,\n                status: 'init',\n            }\n        }\n        case PROJECTS_LOAD_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case PROJECTS_LOAD_SUCCESS: {\n            return {\n                ...state,\n                status: 'success',\n                items: action.payload.items,\n            }\n        }\n\n        case PROJECTS_SAVE_START: {\n            return {\n                ...state,\n                saveStatus: 'processing',\n            }\n        }\n        case PROJECTS_SAVE_SUCCESS: {\n            if (action.payload.isNew) {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: [\n                        ...state.items,\n                        action.payload.item,\n                    ],\n                }\n            } else {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: state.items.map(item => {\n                        if (item.id == action.payload.item.id) {\n                            return action.payload.item\n                        } else {\n                            return item\n                        }\n                    }),\n                }\n            }\n        }\n        case PROJECTS_SAVE_ERROR: {\n            return {\n                ...state,\n                saveStatus: 'ok',\n            }\n        }\n\n        case PROJECTS_DELETE_START: {\n            return {\n                ...state,\n                deleteStatus: 'processing',\n            }\n        }\n        case PROJECTS_DELETE_SUCCESS: {\n            let newItems = []\n            state.items.forEach(item => {\n                if (item.id != action.payload.id) {\n                    newItems.push(item)\n                }\n            })\n            return {\n                ...state,\n                deleteStatus: 'ok',\n                items: newItems,\n            }\n        }\n        case PROJECTS_DELETE_ERROR: {\n            return {\n                ...state,\n                deleteStatus: 'ok',\n            }\n        }\n        \n        default:\n            // If this reducer doesn't recognize the action type, or doesn't\n            // care about this specific action, return the existing state unchanged\n            return state\n    }\n}\n","/Users/tpmanc/Sites/backup-frontend/src/store/projects/actions.js",["222"],"import {\n  PROJECTS_LOAD_START,\n  PROJECTS_LOAD_SUCCESS,\n  PROJECTS_LOAD_ERROR,\n  PROJECTS_INIT,\n  PROJECTS_SAVE_START,\n  PROJECTS_SAVE_SUCCESS,\n  PROJECTS_SAVE_ERROR,\n  PROJECTS_DELETE_START,\n  PROJECTS_DELETE_SUCCESS,\n  PROJECTS_DELETE_ERROR,\n} from './const'\nimport { client } from '../../api/client'\nimport axios from 'axios'\nimport { axiosHelper } from '../../helpers/axios-helper'\n\nexport const projectsLoad = () => {\n  return dispatch => {\n    dispatch(projectsLoadStart())\n\n    axiosHelper.get(\n      client.getApiUrl() + '/projects',\n      (res) => {\n        dispatch(\n          projectsLoadFinish({\n            status: 'ok',\n            items: res.data,\n          })\n        )\n      },\n      (err) => {\n        dispatch(projectsLoadError(err.message))\n      },\n    )\n  }\n}\nconst projectsLoadFinish = res => ({\n    type: PROJECTS_LOAD_SUCCESS,\n    payload: {\n      ...res\n    }\n})\nconst projectsLoadStart = res => ({\n    type: PROJECTS_LOAD_START,\n    payload: {\n      ...res\n    }\n})\nconst projectsLoadError = res => ({\n    type: PROJECTS_LOAD_ERROR,\n    payload: {\n      ...res\n    }\n})\n\nexport const projectsInit = res => ({\n  type: PROJECTS_INIT,\n  payload: {\n    ...res\n  }\n})\n\n\nexport const projectSave = ({id, title}, callback, errorCallback) => {\n  return dispatch => {\n      dispatch(\n        projectSaveStart()\n      )\n\n      axios\n          .post(client.getApiUrl() + '/project/save', {\n              id,\n              title,\n          })\n          .then(res => {\n              console.log(res.data)\n              dispatch(\n                projectSaveFinish({\n                  item: res.data,\n                  isNew: id == 0,\n                })\n              )\n\n              callback()\n          })\n          .catch(err => {\n              dispatch(projectSaveError());\n\n              errorCallback(err.message)\n          });\n  }\n}\nconst projectSaveStart = res => ({\n  type: PROJECTS_SAVE_START,\n  payload: {\n    ...res\n  }\n})\nconst projectSaveFinish = res => ({\n  type: PROJECTS_SAVE_SUCCESS,\n  payload: {\n    ...res\n  }\n})\nconst projectSaveError = res => ({\n  type: PROJECTS_SAVE_ERROR,\n  payload: {\n    ...res\n  }\n})\n\n\n\nexport const projectDelete = (id, callback, onError) => {\n  return dispatch => {\n    dispatch(\n      projectDeleteStart()\n    )\n\n    axios\n      .post(client.getApiUrl() + '/project/delete', {\n        id,\n      })\n      .then(res => {\n        dispatch(\n          projectDeleteFinish({\n            id: res.data.id,\n          })\n        )\n\n        callback()\n      })\n      .catch(err => {\n        dispatch(projectDeleteError())\n\n        if (onError !== undefined) {\n          onError(err.message)\n        }\n      })\n  }\n}\nconst projectDeleteStart = res => ({\n  type: PROJECTS_DELETE_START,\n  payload: {\n    ...res\n  }\n})\nconst projectDeleteFinish = res => ({\n  type: PROJECTS_DELETE_SUCCESS,\n  payload: {\n    ...res\n  }\n})\nconst projectDeleteError = res => ({\n  type: PROJECTS_DELETE_ERROR,\n  payload: {\n    ...res\n  }\n})","/Users/tpmanc/Sites/backup-frontend/src/store/projects/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/pages/project-view.js",["223","224"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useHistory, useParams, Link } from \"react-router-dom\"\nimport { projectLoad } from '../store/project-view/actions'\nimport { serversLoad, serverSave, serverDelete } from '../store/servers/actions'\n\nimport { Loader } from 'rsuite'\nimport { Notification } from 'rsuite'\nimport { Table } from 'rsuite'\nimport { Drawer } from 'rsuite'\nimport { Form, FormGroup, FormControl, ControlLabel, HelpBlock } from 'rsuite'\nimport { Button, IconButton } from 'rsuite'\nimport { Icon } from 'rsuite'\nimport { Breadcrumb } from 'rsuite'\nimport { Placeholder } from 'rsuite'\nimport { Panel } from 'rsuite'\nimport { Divider } from 'rsuite'\n\nexport default function ProjectView() {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    let { id } = useParams()\n\n    const projectRequestStatus = useSelector(state => state.projectView.status)\n    const project = useSelector(state => state.projectView.item)\n    \n    const serversRequestStatus = useSelector(state => state.servers.status)\n    const servers = useSelector(state => state.servers.items)\n\n    const { Column, HeaderCell, Cell } = Table\n\n    useEffect(() => {\n        dispatch(\n            projectLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n        dispatch(\n            serversLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n    }, [id])\n\n    const onError = (message) => {\n        Notification.error({\n            title: 'Error!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n\n    const renderServers = () => {\n        return <Table\n            height={400}\n            data={servers}\n            onRowClick={data => {\n                // history.push(`/server/${data.id}`)\n            }}\n        >\n            <Column width={70} align=\"center\">\n            <HeaderCell>Id</HeaderCell>\n            <Cell dataKey=\"id\" />\n            </Column>\n\n            <Column flexGrow={1}>\n            <HeaderCell>host</HeaderCell>\n            <Cell dataKey=\"host\" />\n            </Column>\n\n            <Column width={200} fixed=\"right\">\n            <HeaderCell>Action</HeaderCell>\n\n            <Cell>\n                {rowData => {\n                function editAction() {\n                    setFormId(rowData.id)\n                    setFormHost(rowData.host)\n                    setFormUser(rowData.user)\n                    setFormPassword(rowData.password)\n                    setFormPort(rowData.port)\n\n                    setDrawerTitle('Edit Server')\n                    openDrawer()\n                }\n                function deleteAction() {\n                    dispatch(\n                        serverDelete(\n                            rowData.id,\n                            () => {},\n                            onError,\n                        )\n                    )\n                }\n                return (\n                    <span>\n                        <IconButton size=\"xs\" icon={ <Icon icon=\"eye\"/> } componentClass={Link} to={`/server/${rowData.id}`} />{' '}\n                        <IconButton size=\"xs\" icon={ <Icon icon=\"edit\"/> } onClick={editAction} />{' '}\n                        <IconButton size=\"xs\" icon={ <Icon icon=\"trash2\"/> } onClick={deleteAction} />\n                    </span>\n                );\n                }}\n            </Cell>\n            </Column>\n        </Table>\n    }\n\n    const [ drawerOpen, setDrawerOpen ] = useState(false)\n    const [ drawerTitle, setDrawerTitle ] = useState('')\n    const [ formId, setFormId ] = useState(0)\n    const [ formHost, setFormHost ] = useState('')\n    const [ formUser, setFormUser ] = useState('')\n    const [ formPassword, setFormPassword ] = useState('')\n    const [ formPort, setFormPort ] = useState('')\n\n    const addServer = () => {\n        setDrawerTitle('Add Server')\n        openDrawer()\n    }\n    const openDrawer = () => {\n        setDrawerOpen(true)\n    }\n    const closeDrawer = () => {\n        setFormId(0)\n        setFormHost('')\n        setFormUser('')\n        setFormPassword('')\n        setFormPort('')\n    \n        setDrawerOpen(false)\n    }\n    const onHostChanged = value => setFormHost(value)\n    const onUserChanged = value => setFormUser(value)\n    const onPasswordChanged = value => setFormPassword(value)\n    const onPortChanged = value => setFormPort(value)\n    const saveServer = () => {\n        dispatch(\n            serverSave({\n                projectId: id,\n                formId,\n                formHost,\n                formUser,\n                formPassword,\n                formPort,\n            }, () => {\n                closeDrawer()\n                \n                setFormId(0)\n                setFormHost('')\n                setFormUser('')\n                setFormPassword('')\n                setFormPort('')\n\n                Notification.success({\n                    title: 'Success!',\n                    placement: 'topStart',\n                    description: 'Server Saved',\n                })\n            }, onError)\n        )\n    }\n\n    return (\n        <div>\n            <Breadcrumb>\n                <Breadcrumb.Item componentClass={Link} to='/'>Dashboard</Breadcrumb.Item>\n                <Breadcrumb.Item componentClass={Link} to='/projects'>Projects</Breadcrumb.Item>\n                <Breadcrumb.Item active>Project</Breadcrumb.Item>\n            </Breadcrumb>\n            \n            {\n                projectRequestStatus !== 'loaded'\n                    ? <Placeholder.Paragraph rows={1} rowHeight={42} rowMargin={0} />\n                    : <h3>Project \"{project.title}\"</h3>\n            }\n\n            <br/>\n            <h4>Servers</h4>\n            <Panel bordered>\n                <Button onClick={addServer} color=\"green\">\n                    Add Server\n                </Button>\n\n                <Divider />\n\n                {\n                    serversRequestStatus !== 'loaded'\n                    ? <Loader content=\"loading\" size=\"md\" />\n                    : renderServers()\n                }\n            </Panel>\n            \n            <Drawer\n                show={drawerOpen}\n                onHide={closeDrawer}\n            >\n                <Drawer.Header>\n                    <Drawer.Title>{ drawerTitle }</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <Form fluid>\n                        <FormGroup>\n                            <ControlLabel>Host</ControlLabel>\n                            <FormControl name=\"host\" placeholder=\"Host\" onChange={onHostChanged} value={formHost} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>User</ControlLabel>\n                            <FormControl name=\"user\" placeholder=\"User\" onChange={onUserChanged} value={formUser} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Password</ControlLabel>\n                            <FormControl name=\"password\" placeholder=\"Password\" onChange={onPasswordChanged} value={formPassword} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Port</ControlLabel>\n                            <FormControl name=\"port\" type=\"number\" placeholder=\"Port\" onChange={onPortChanged} value={formPort} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                    </Form>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={saveServer} appearance=\"primary\">Save</Button>\n                    <Button onClick={closeDrawer} appearance=\"subtle\">Cancel</Button>\n                </Drawer.Footer>\n            </Drawer>\n        </div>\n    )\n}","/Users/tpmanc/Sites/backup-frontend/src/store/project-view/reducer.js",["225"],"import { \n    PROJECT_RESET,\n    PROJECT_LOAD_START,\n    PROJECT_LOAD_SUCCESS,\n    PROJECT_LOAD_ERROR,\n } from './const'\n import { LOCATION_CHANGE } from 'react-router-redux'\n\nconst initialState = {\n    status: 'init',\n    item: {}\n}\n\nexport function projectViewReducer(state = initialState, action) {\n    // The reducer normally looks at the action type field to decide what happens\n    switch (action.type) {\n        case PROJECT_RESET: {\n            return {\n                ...state,\n                status: 'init',\n                item: {},\n            }\n        }\n        case PROJECT_LOAD_SUCCESS: {\n            return {\n                ...state,\n                status: 'loaded',\n                item: action.payload,\n            }\n        }\n        case PROJECT_LOAD_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case PROJECT_LOAD_ERROR: {\n            return {\n                ...state,\n                status: 'error',\n            }\n        }\n        // Do something here based on the different types of actions\n        default:\n            // If this reducer doesn't recognize the action type, or doesn't\n            // care about this specific action, return the existing state unchanged\n            return state\n    }\n}\n","/Users/tpmanc/Sites/backup-frontend/src/store/project-view/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/project-view/actions.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/servers/reducer.js",["226","227"],"import {\n    SERVERS_INIT,\n    SERVERS_LOAD_START,\n    SERVERS_LOAD_SUCCESS,\n    SERVERS_LOAD_ERROR,\n    SERVER_SAVE_START,\n    SERVER_SAVE_SUCCESS,\n    SERVER_SAVE_ERROR,\n    SERVER_DELETE_START,\n    SERVER_DELETE_SUCCESS,\n    SERVER_DELETE_ERROR,\n} from './const'\n\nconst initialState = {\n    status: 'init',\n    items: [],\n    saveStatus: 'ok',\n}\n\nexport function serversReducer(state = initialState, action) {\n    // The reducer normally looks at the action type field to decide what happens\n    switch (action.type) {\n        case SERVERS_INIT: {\n            return {\n                ...state,\n                status: 'init',\n            }\n        }\n        case SERVERS_LOAD_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case SERVERS_LOAD_SUCCESS: {\n            return {\n                ...state,\n                status: 'loaded',\n                items: action.payload.items,\n            }\n        }\n        case SERVERS_LOAD_ERROR: {\n            return {\n                ...state,\n                status: 'error',\n            }\n        }\n\n        case SERVER_SAVE_START: {\n            return {\n                ...state,\n                saveStatus: 'processed',\n            }\n        }\n        case SERVER_SAVE_SUCCESS: {\n            if (action.payload.isNew) {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: [\n                        ...state.items,\n                        action.payload.item,\n                    ],\n                }\n            } else {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: state.items.map(item => {\n                        if (item.id == action.payload.item.id) {\n                            return action.payload.item\n                        } else {\n                            return item\n                        }\n                    }),\n                }\n            }\n        }\n        case SERVER_SAVE_ERROR: {\n            return {\n                ...state,\n                saveStatus: 'ok',\n            }\n        }\n\n        case SERVER_DELETE_START: {\n            return {\n                ...state,\n            }\n        }\n        case SERVER_DELETE_SUCCESS: {\n            let newItems = []\n            state.items.forEach(item => {\n                if (item.id != action.payload.id) {\n                    newItems.push(item)\n                }\n            })\n            return {\n                ...state,\n                items: newItems,\n            }\n        }\n        case SERVER_DELETE_ERROR: {\n            return {\n                ...state,\n            }\n        }\n        \n        default:\n            // If this reducer doesn't recognize the action type, or doesn't\n            // care about this specific action, return the existing state unchanged\n            return state\n    }\n}\n","/Users/tpmanc/Sites/backup-frontend/src/store/servers/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/servers/actions.js",["228"],"import {\n    SERVERS_LOAD_START,\n    SERVERS_LOAD_SUCCESS,\n    SERVERS_LOAD_ERROR,\n    SERVER_SAVE_START,\n    SERVER_SAVE_SUCCESS,\n    SERVER_SAVE_ERROR,\n    SERVER_DELETE_START,\n    SERVER_DELETE_SUCCESS,\n    SERVER_DELETE_ERROR,\n} from './const'\nimport { client } from '../../api/client'\nimport axios from 'axios'\n\nexport const serversLoad = (id) => {\n    return dispatch => {\n        dispatch(serversLoadStart())\n\n        axios\n            .get(client.getApiUrl() + `/servers?projectId=${id}`)\n            .then(res => {\n                console.log(res.data)\n                dispatch(\n                  serversLoadFinish({\n                      items: res.data\n                  })\n                )\n            })\n            .catch(err => {\n                dispatch(serversLoadError(err.message));\n            });\n    }\n}\n\nconst serversLoadFinish = res => ({\n    type: SERVERS_LOAD_SUCCESS,\n    payload: {\n      ...res\n    }\n})\n\nconst serversLoadStart = res => ({\n    type: SERVERS_LOAD_START,\n    payload: {\n      ...res\n    }\n})\n\nconst serversLoadError = res => ({\n    type: SERVERS_LOAD_ERROR,\n    payload: {\n      ...res\n    }\n})\n\nexport const serverSave = ({projectId, formId, formHost, formUser, formPassword, formPort}, callback, onError) => {\n    return dispatch => {\n        dispatch(serverSaveStart())\n\n        axios\n            .post(client.getApiUrl() + '/server/save', {\n                projectId,\n                id: formId,\n                host: formHost,\n                user: formUser,\n                password: formPassword,\n                port: formPort,\n            })\n            .then(res => {\n                dispatch(\n                  serverSaveFinish({\n                      item: res.data,\n                      isNew: formId == 0,\n                  })\n                )\n\n                callback()\n            })\n            .catch(err => {\n                dispatch(serverSaveError())\n\n                onError(err.message)\n            });\n    }\n}\n\nconst serverSaveStart = res => ({\n    type: SERVER_SAVE_START,\n    payload: {\n      ...res\n    }\n})\nconst serverSaveFinish = res => ({\n    type: SERVER_SAVE_SUCCESS,\n    payload: {\n      ...res\n    }\n})\nconst serverSaveError = res => ({\n    type: SERVER_SAVE_ERROR,\n    payload: {\n      ...res\n    }\n})\n\nexport const serverDelete = (id, callback, onError) => {\n    return dispatch => {\n        dispatch(serverDeleteStart())\n\n        axios\n            .post(client.getApiUrl() + '/server/delete', {\n                id\n            })\n            .then(res => {\n                dispatch(\n                    serverDeleteFinish({id: id})\n                )\n\n                callback()\n            })\n            .catch(err => {\n                dispatch(serverDeleteError())\n\n                onError(err.message)\n            });\n    }\n}\n\nconst serverDeleteStart = res => ({\n    type: SERVER_DELETE_START,\n    payload: {\n      ...res\n    }\n})\nconst serverDeleteFinish = res => ({\n    type: SERVER_DELETE_SUCCESS,\n    payload: {\n      ...res\n    }\n})\nconst serverDeleteError = res => ({\n    type: SERVER_DELETE_ERROR,\n    payload: {\n      ...res\n    }\n})\n","/Users/tpmanc/Sites/backup-frontend/src/store/server/reducer.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/server/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/pages/server-view.js",["229","230","231","232"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useParams, Link } from \"react-router-dom\"\nimport { serverLoad } from '../store/server/actions'\nimport { databasesLoad, databaseSave, databaseDelete, databaseRun } from '../store/databases/actions'\nimport { filesLoad, filesSave, filesDelete, filesRun } from '../store/files/actions'\n\nimport { Table } from 'rsuite'\nimport { Loader } from 'rsuite'\nimport { Notification } from 'rsuite'\nimport { Placeholder } from 'rsuite'\nimport { Drawer } from 'rsuite'\nimport { Icon } from 'rsuite'\nimport { Button, IconButton } from 'rsuite'\nimport { Panel } from 'rsuite'\nimport { Divider } from 'rsuite'\nimport { Form, FormGroup, FormControl, ControlLabel, HelpBlock } from 'rsuite'\n\nexport default function ServerView() {\n    const dispatch = useDispatch()\n    let { id } = useParams()\n    const { Column, HeaderCell, Cell } = Table\n\n    const serverRequestStatus = useSelector(state => state.server.status)\n    const server = useSelector(state => state.server.item)\n\n    const databasesRequestStatus = useSelector(state => state.databases.status)\n    const databasesSaveRequestStatus = useSelector(state => state.databases.saveStatus)\n    const databasesDeleteRequestStatus = useSelector(state => state.databases.deleteStatus)\n    const databases = useSelector(state => state.databases.items)\n    \n    const filesRequestStatus = useSelector(state => state.files.status)\n    const filesSaveRequestStatus = useSelector(state => state.files.saveStatus)\n    const filesDeleteRequestStatus = useSelector(state => state.files.deleteStatus)\n    const files = useSelector(state => state.files.items)\n\n    useEffect(() => {\n        dispatch(\n            databasesLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n        dispatch(\n            serverLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n        dispatch(\n            filesLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n    }, [id])\n\n    const onError = (message) => {\n        Notification.error({\n            title: 'Error!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n    const success = (message) => {\n        Notification.success({\n            title: 'Success!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n\n    const [ databaseDrawerOpen, setDatabaseDrawerOpen ] = useState(false)\n    const [ databaseDrawerTitle, setDatabaseDrawerTitle ] = useState('')\n    const [ formId, setFormId ] = useState(0)\n    const [ formUser, setFormUser ] = useState('')\n    const [ formPassword, setFormPassword ] = useState('')\n    const [ formDatabase, setFormDatabase ] = useState('')\n\n    const [ formFilesId, setFormFilesId ] = useState(0)\n    const [ formPath, setFormPath ] = useState('')\n\n    const [ filesDrawerOpen, setFilesDrawerOpen ] = useState(false)\n    const [ filesDrawerTitle, setFilesDrawerTitle ] = useState('')\n\n    const addDatabase = () => {\n        setDatabaseDrawerTitle('Add Database Backup')\n        openDatabaseDrawer()\n    }\n    const openDatabaseDrawer = () => {\n        setDatabaseDrawerOpen(true)\n    }\n    const closeDatabaseDrawer = () => {\n        resetDatabaseForm()\n        setDatabaseDrawerOpen(false)\n    }\n    const onUserChanged = value => setFormUser(value)\n    const onPasswordChanged = value => setFormPassword(value)\n    const onDatabaseChanged = value => setFormDatabase(value)\n    const resetDatabaseForm = () => {\n        setFormId(0)\n        setFormUser('')\n        setFormPassword('')\n        setFormDatabase('')\n    }\n    const saveDatabase = () => {\n        dispatch(\n            databaseSave(\n                {\n                    serverId: id,\n                    id: formId,\n                    user: formUser,\n                    password: formPassword,\n                    database: formDatabase,\n                },\n                () => {\n                    closeDatabaseDrawer()\n                    resetDatabaseForm()\n                    Notification.success({\n                        title: 'Success!',\n                        placement: 'topStart',\n                        description: 'Database Saved',\n                    })\n                },\n                onError,\n            )\n        )\n    }\n\n    const onPathChanged = value => setFormPath(value)\n    const addFiles = () => {\n        setFilesDrawerTitle('Add Files Backup')\n        openFilesDrawer()\n    }\n    const openFilesDrawer = () => {\n        setFilesDrawerOpen(true)\n    }\n    const closeFilesDrawer = () => {\n        resetFilesForm()\n        setFilesDrawerOpen(false)\n    }\n    const resetFilesForm = () => {\n        setFormFilesId(0)\n        setFormPath('')\n    }\n    const saveFiles = () => {\n        dispatch(\n            filesSave(\n                {\n                    serverId: id,\n                    id: formFilesId,\n                    path: formPath,\n                },\n                () => {\n                    closeFilesDrawer()\n                    resetFilesForm()\n                    Notification.success({\n                        title: 'Success!',\n                        placement: 'topStart',\n                        description: 'Files Backup Saved',\n                    })\n                },\n                onError,\n            )\n        )\n    }\n\n    const renderDatabaseTable = () => {\n        return <Table\n            height={400}\n            data={databases}\n            onRowClick={data => {}}\n        >\n            <Column width={70} align=\"center\">\n                <HeaderCell>Id</HeaderCell>\n                <Cell dataKey=\"id\" />\n            </Column>\n\n            <Column flexGrow={1}>\n                <HeaderCell>Database</HeaderCell>\n                <Cell dataKey=\"database\" />\n            </Column>\n\n            <Column width={200}>\n                <HeaderCell></HeaderCell>\n\n                <Cell>\n                    {rowData => {\n                        function runAction() {\n                            dispatch(\n                                databaseRun(\n                                    rowData.id,\n                                    () => {\n                                        success('Database Backup Started')\n                                    },\n                                    onError,\n                                )\n                            )\n                        }\n                        return (\n                            <span>\n                                <IconButton size=\"xs\" icon={ <Icon icon=\"play\"/> } onClick={runAction} />\n                            </span>\n                        )\n                    }}\n                </Cell>\n            </Column>\n\n            <Column width={200} fixed=\"right\">\n                <HeaderCell>Action</HeaderCell>\n\n                <Cell>\n                    {rowData => {\n                    function editAction() {\n                        setFormId(rowData.id)\n                        setFormUser(rowData.user)\n                        setFormPassword(rowData.password)\n                        setFormDatabase(rowData.database)\n                        setDatabaseDrawerTitle('Edit Database')\n                        openDatabaseDrawer()\n                    }\n                    function deleteAction() {\n                        dispatch(\n                            databaseDelete(\n                                rowData.id,\n                                () => {\n                                    success('Database Backup Removed')\n                                },\n                                onError,\n                            )\n                        )\n                    }\n                    return (\n                        <span>\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"eye\"/> } componentClass={Link} to={`/database/${rowData.id}`} />{' '}\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"edit\"/> } onClick={editAction} />{' '}\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"trash2\"/> } onClick={deleteAction} />\n                        </span>\n                    );\n                    }}\n                </Cell>\n            </Column>\n        </Table>\n    }\n\n    const renderFilesTable = () => {\n        return <Table\n            height={400}\n            data={files}\n            onRowClick={data => {}}\n        >\n            <Column width={70} align=\"center\">\n            <HeaderCell>Id</HeaderCell>\n            <Cell dataKey=\"id\" />\n            </Column>\n\n            <Column flexGrow={1}>\n            <HeaderCell>Path</HeaderCell>\n            <Cell dataKey=\"path\" />\n            </Column>\n\n            <Column width={200}>\n                <HeaderCell></HeaderCell>\n\n                <Cell>\n                    {rowData => {\n                    function runAction() {\n                        dispatch(\n                            filesRun(\n                                rowData.id,\n                                () => {\n                                    success('Files Backup Started')\n                                },\n                                onError,\n                            )\n                        )\n                    }\n                    return (\n                        <span>\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"play\"/> } onClick={runAction} />\n                        </span>\n                    );\n                    }}\n                </Cell>\n            </Column>\n\n            <Column width={200} fixed=\"right\">\n                <HeaderCell>Action</HeaderCell>\n\n                <Cell>\n                    {rowData => {\n                    function editAction() {\n                        setFormFilesId(rowData.id)\n                        setFormPath(rowData.path)\n                        setFilesDrawerTitle('Edit Files')\n                        openFilesDrawer()\n                    }\n                    function deleteAction() {\n                        dispatch(\n                            filesDelete(\n                                rowData.id,\n                                () => {\n                                    success('Files Backup Removed')\n                                },\n                                onError,\n                            )\n                        )\n                    }\n                    return (\n                        <span>\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"eye\"/> } componentClass={Link} to={`/files/${rowData.id}`} />{' '}\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"edit\"/> } onClick={editAction} />{' '}\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"trash2\"/> } onClick={deleteAction} />\n                        </span>\n                    );\n                    }}\n                </Cell>\n            </Column>\n        </Table>\n    }\n\n    return (\n        <div>\n            {\n                serverRequestStatus !== 'loaded'\n                    ? <Placeholder.Paragraph rows={1} rowHeight={42} rowMargin={0} active />\n                    : <h3>Server \"{server.host}\"</h3>\n            }\n\n            <br/>\n            <h4>Database Backups</h4>\n            <Panel bordered>\n                <Button onClick={addDatabase} color=\"green\">\n                    Add Database Backup\n                </Button>\n\n                <Divider />\n\n                {\n                    (databasesRequestStatus === 'loading')\n                        ? <Placeholder.Paragraph rows={5} active>\n                            <Loader center backdrop content=\"loading\" size=\"md\" />\n                        </Placeholder.Paragraph>\n                        : renderDatabaseTable()\n                }\n            </Panel>\n\n            <br/>\n            <h4>Files Backups</h4>\n            <Panel bordered>\n                <Button onClick={addFiles} color=\"green\">\n                    Add Files Backup\n                </Button>\n\n                <Divider />\n\n                {\n                    (filesRequestStatus === 'loading')\n                        ? <Placeholder.Paragraph rows={5} active>\n                            <Loader center backdrop content=\"loading\" size=\"md\" />\n                        </Placeholder.Paragraph>\n                        : renderFilesTable()\n                }\n            </Panel>\n\n            <Drawer\n                show={databaseDrawerOpen}\n                onHide={closeDatabaseDrawer}\n            >\n                <Drawer.Header>\n                    <Drawer.Title>{ databaseDrawerTitle }</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <p>Fill Database connection information</p><br/>\n                    <Form fluid>\n                        <FormGroup>\n                            <ControlLabel>User</ControlLabel>\n                            <FormControl name=\"user\" placeholder=\"User\" onChange={onUserChanged} value={formUser} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Password</ControlLabel>\n                            <FormControl name=\"password\" placeholder=\"Password\" onChange={onPasswordChanged} value={formPassword} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>Database</ControlLabel>\n                            <FormControl name=\"database\" placeholder=\"Database\" onChange={onDatabaseChanged} value={formDatabase} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                    </Form>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={saveDatabase} appearance=\"primary\" loading={databasesSaveRequestStatus === 'processing'}>Save</Button>\n                    <Button onClick={closeDatabaseDrawer} appearance=\"subtle\">Cancel</Button>\n                </Drawer.Footer>\n            </Drawer>\n\n            <Drawer\n                show={filesDrawerOpen}\n                onHide={closeFilesDrawer}\n            >\n                <Drawer.Header>\n                    <Drawer.Title>{ filesDrawerTitle }</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    <Form fluid>\n                        <FormGroup>\n                            <ControlLabel>Folder Path</ControlLabel>\n                            <FormControl name=\"path\" placeholder=\"Path\" onChange={onPathChanged} value={formPath} />\n                            <HelpBlock>Required</HelpBlock>\n                        </FormGroup>\n                    </Form>\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Button onClick={saveFiles} appearance=\"primary\" loading={databasesSaveRequestStatus === 'processing'}>Save</Button>\n                    <Button onClick={closeDatabaseDrawer} appearance=\"subtle\">Cancel</Button>\n                </Drawer.Footer>\n            </Drawer>\n        </div>\n    )\n}","/Users/tpmanc/Sites/backup-frontend/src/store/server/actions.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/databases/reducer.js",["233","234"],"import {\n    DATABASES_LOAD_START,\n    DATABASES_LOAD_SUCCESS,\n    DATABASES_LOAD_ERROR,\n    DATABASES_SAVE_START,\n    DATABASES_SAVE_SUCCESS,\n    DATABASES_SAVE_ERROR,\n    DATABASES_DELETE_START,\n    DATABASES_DELETE_SUCCESS,\n    DATABASES_DELETE_ERROR,\n} from './const'\n\nconst initialState = {\n    status: 'init',\n    items: [],\n    saveStatus: 'ok',\n    deleteStatus: 'ok',\n}\n\nexport function databasesReducer(state = initialState, action) {\n    // The reducer normally looks at the action type field to decide what happens\n    switch (action.type) {\n        case DATABASES_LOAD_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case DATABASES_LOAD_SUCCESS: {\n            return {\n                ...state,\n                status: 'loaded',\n                items: action.payload.items,\n            }\n        }\n        case DATABASES_LOAD_ERROR: {\n            return {\n                ...state,\n                status: 'error',\n            }\n        }\n\n        case DATABASES_SAVE_START: {\n            return {\n                ...state,\n                saveStatus: 'processed',\n            }\n        }\n        case DATABASES_SAVE_SUCCESS: {\n            if (action.payload.isNew) {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: [\n                        ...state.items,\n                        action.payload.item,\n                    ],\n                }\n            } else {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: state.items.map(item => {\n                        if (item.id == action.payload.item.id) {\n                            return action.payload.item\n                        } else {\n                            return item\n                        }\n                    }),\n                }\n            }\n        }\n        case DATABASES_SAVE_ERROR: {\n            return {\n                ...state,\n                saveStatus: 'ok',\n            }\n        }\n\n        case DATABASES_DELETE_START: {\n            return {\n                ...state,\n            }\n        }\n        case DATABASES_DELETE_SUCCESS: {\n            let newItems = []\n            state.items.forEach(item => {\n                if (item.id != action.payload.id) {\n                    newItems.push(item)\n                }\n            })\n            return {\n                ...state,\n                items: newItems,\n            }\n        }\n        case DATABASES_DELETE_ERROR: {\n            return {\n                ...state,\n            }\n        }\n        \n        default:\n            // If this reducer doesn't recognize the action type, or doesn't\n            // care about this specific action, return the existing state unchanged\n            return state\n    }\n}\n","/Users/tpmanc/Sites/backup-frontend/src/store/databases/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/databases/actions.js",["235"],"import {\n    DATABASES_LOAD_START,\n    DATABASES_LOAD_SUCCESS,\n    DATABASES_LOAD_ERROR,\n    DATABASES_SAVE_START,\n    DATABASES_SAVE_SUCCESS,\n    DATABASES_SAVE_ERROR,\n    DATABASES_DELETE_START,\n    DATABASES_DELETE_SUCCESS,\n    DATABASES_DELETE_ERROR,\n    DATABASES_RUN_START,\n    DATABASES_RUN_SUCCESS,\n    DATABASES_RUN_ERROR,\n} from './const'\nimport { client } from '../../api/client'\nimport axios from 'axios'\n  \nexport const databasesLoad = (serverId) => {\n    return dispatch => {\n      dispatch(databasesLoadStart())\n  \n      axios\n        .get(client.getApiUrl() + `/databases?serverId=${serverId}`)\n        .then(res => {\n            console.log(res.data)\n            dispatch(\n                databasesLoadFinish({\n                    status: 'ok',\n                    items: res.data,\n                })\n            )\n        })\n        .catch(err => {\n            dispatch(databasesLoadError(err.message))\n        })\n    }\n}\nconst databasesLoadStart = res => ({\n    type: DATABASES_LOAD_START,\n    payload: {\n        ...res\n    }\n})\nconst databasesLoadFinish = res => ({\n    type: DATABASES_LOAD_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst databasesLoadError = res => ({\n    type: DATABASES_LOAD_ERROR,\n    payload: {\n        ...res\n    }\n})\n\n\nexport const databaseSave = ({serverId, id, user, password, database}, callback, errorCallback) => {\n    return dispatch => {\n        dispatch(\n            databaseSaveStart()\n        )\n  \n        axios\n            .post(client.getApiUrl() + '/database/save', {\n                serverId,\n                id,\n                user,\n                password,\n                database,\n            })\n            .then(res => {\n                dispatch(\n                    databaseSaveFinish({\n                        item: res.data,\n                        isNew: id == 0,\n                    })\n                )\n  \n                callback()\n            })\n            .catch(err => {\n                dispatch(databaseSaveError())\n  \n                errorCallback(err.message)\n            });\n    }\n}\nconst databaseSaveStart = res => ({\n    type: DATABASES_SAVE_START,\n    payload: {\n        ...res\n    }\n})\nconst databaseSaveFinish = res => ({\n    type: DATABASES_SAVE_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst databaseSaveError = res => ({\n    type: DATABASES_SAVE_ERROR,\n    payload: {\n        ...res\n    }\n})\n\n\n\nexport const databaseDelete = (id, callback, onError) => {\n    return dispatch => {\n        dispatch(\n            databaseDeleteStart()\n        )\n  \n      axios\n        .post(client.getApiUrl() + '/database/delete', {\n            id,\n        })\n        .then(res => {\n            dispatch(\n                databaseDeleteFinish({\n                    id: res.data.id,\n                })\n            )\n  \n            callback()\n        })\n        .catch(err => {\n            dispatch(databaseDeleteError())\n  \n            if (onError !== undefined) {\n                onError(err.message)\n            }\n        })\n    }\n}\nconst databaseDeleteStart = res => ({\n    type: DATABASES_DELETE_START,\n    payload: {\n        ...res\n    }\n})\nconst databaseDeleteFinish = res => ({\n    type: DATABASES_DELETE_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst databaseDeleteError = res => ({\n    type: DATABASES_DELETE_ERROR,\n    payload: {\n        ...res\n    }\n})\n\n\nexport const databaseRun = (id, callback, onError) => {\n    return dispatch => {\n        dispatch(\n            databaseRunStart()\n        )\n  \n      axios\n        .post(client.getApiUrl() + '/database/run', {\n            id,\n        })\n        .then(res => {\n            dispatch(\n                databaseRunFinish({\n                    id: res.data.id,\n                })\n            )\n  \n            callback()\n        })\n        .catch(err => {\n            dispatch(databaseRunError())\n  \n            if (onError !== undefined) {\n                onError(err.message)\n            }\n        })\n    }\n}\nconst databaseRunStart = res => ({\n    type: DATABASES_RUN_START,\n    payload: {\n        ...res\n    }\n})\nconst databaseRunFinish = res => ({\n    type: DATABASES_RUN_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst databaseRunError = res => ({\n    type: DATABASES_RUN_ERROR,\n    payload: {\n        ...res\n    }\n})\n","/Users/tpmanc/Sites/backup-frontend/src/store/files/actions.js",["236"],"import {\n    FILES_LOAD_START,\n    FILES_LOAD_SUCCESS,\n    FILES_LOAD_ERROR,\n    FILES_SAVE_START,\n    FILES_SAVE_SUCCESS,\n    FILES_SAVE_ERROR,\n    FILES_DELETE_START,\n    FILES_DELETE_SUCCESS,\n    FILES_DELETE_ERROR,\n    FILES_RUN_START,\n    FILES_RUN_SUCCESS,\n    FILES_RUN_ERROR,\n} from './const'\nimport { client } from '../../api/client'\nimport axios from 'axios'\n  \nexport const filesLoad = (serverId, callback, onError) => {\n    return dispatch => {\n      dispatch(filesLoadStart())\n  \n      axios\n        .get(client.getApiUrl() + `/files?serverId=${serverId}`)\n        .then(res => {\n            console.log(res.data)\n            dispatch(\n                filesLoadFinish({\n                    status: 'ok',\n                    items: res.data,\n                })\n            )\n        })\n        .catch(err => {\n            dispatch(filesLoadError())\n\n            if (onError !== undefined) {\n                onError(err.message)\n            }\n        })\n    }\n}\nconst filesLoadStart = res => ({\n    type: FILES_LOAD_START,\n    payload: {\n        ...res\n    }\n})\nconst filesLoadFinish = res => ({\n    type: FILES_LOAD_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst filesLoadError = res => ({\n    type: FILES_LOAD_ERROR,\n    payload: {\n        ...res\n    }\n})\n\n\nexport const filesSave = ({serverId, id, path}, callback, onError) => {\n    return dispatch => {\n        dispatch(\n            filesSaveStart()\n        )\n  \n        axios\n            .post(client.getApiUrl() + '/files/save', {\n                serverId,\n                id,\n                path,\n            })\n            .then(res => {\n                dispatch(\n                    filesSaveFinish({\n                        item: res.data,\n                        isNew: id == 0,\n                    })\n                )\n  \n                callback()\n            })\n            .catch(err => {\n                dispatch(filesSaveError())\n  \n                onError(err.message)\n            });\n    }\n}\nconst filesSaveStart = res => ({\n    type: FILES_SAVE_START,\n    payload: {\n        ...res\n    }\n})\nconst filesSaveFinish = res => ({\n    type: FILES_SAVE_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst filesSaveError = res => ({\n    type: FILES_SAVE_ERROR,\n    payload: {\n        ...res\n    }\n})\n\n\n\nexport const filesDelete = (id, callback, onError) => {\n    return dispatch => {\n        dispatch(\n            filesDeleteStart()\n        )\n  \n      axios\n        .post(client.getApiUrl() + '/files/delete', {\n            id,\n        })\n        .then(res => {\n            dispatch(\n                filesDeleteFinish({\n                    id: res.data.id,\n                })\n            )\n  \n            callback()\n        })\n        .catch(err => {\n            dispatch(filesDeleteError())\n  \n            if (onError !== undefined) {\n                onError(err.message)\n            }\n        })\n    }\n}\nconst filesDeleteStart = res => ({\n    type: FILES_DELETE_START,\n    payload: {\n        ...res\n    }\n})\nconst filesDeleteFinish = res => ({\n    type: FILES_DELETE_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst filesDeleteError = res => ({\n    type: FILES_DELETE_ERROR,\n    payload: {\n        ...res\n    }\n})\n\nexport const filesRun = (id, callback, onError) => {\n    return dispatch => {\n        dispatch(\n            filesRunStart()\n        )\n  \n      axios\n        .post(client.getApiUrl() + '/files/run', {\n            id,\n        })\n        .then(res => {\n            dispatch(\n                filesRunFinish({\n                    id: res.data.id,\n                })\n            )\n  \n            callback()\n        })\n        .catch(err => {\n            dispatch(filesRunError())\n  \n            if (onError !== undefined) {\n                onError(err.message)\n            }\n        })\n    }\n}\nconst filesRunStart = res => ({\n    type: FILES_RUN_START,\n    payload: {\n        ...res\n    }\n})\nconst filesRunFinish = res => ({\n    type: FILES_RUN_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst filesRunError = res => ({\n    type: FILES_RUN_ERROR,\n    payload: {\n        ...res\n    }\n})\n","/Users/tpmanc/Sites/backup-frontend/src/store/files/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/files/reducer.js",["237","238"],"import {\n    FILES_LOAD_START,\n    FILES_LOAD_SUCCESS,\n    FILES_LOAD_ERROR,\n    FILES_SAVE_START,\n    FILES_SAVE_SUCCESS,\n    FILES_SAVE_ERROR,\n    FILES_DELETE_START,\n    FILES_DELETE_SUCCESS,\n    FILES_DELETE_ERROR,\n} from './const'\n\nconst initialState = {\n    status: 'init',\n    items: [],\n    saveStatus: 'ok',\n    deleteStatus: 'ok',\n}\n\nexport function filesReducer(state = initialState, action) {\n    // The reducer normally looks at the action type field to decide what happens\n    switch (action.type) {\n        case FILES_LOAD_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case FILES_LOAD_SUCCESS: {\n            return {\n                ...state,\n                status: 'loaded',\n                items: action.payload.items,\n            }\n        }\n        case FILES_LOAD_ERROR: {\n            return {\n                ...state,\n                status: 'error',\n            }\n        }\n\n        case FILES_SAVE_START: {\n            return {\n                ...state,\n                saveStatus: 'processed',\n            }\n        }\n        case FILES_SAVE_SUCCESS: {\n            if (action.payload.isNew) {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: [\n                        ...state.items,\n                        action.payload.item,\n                    ],\n                }\n            } else {\n                return {\n                    ...state,\n                    saveStatus: 'ok',\n                    items: state.items.map(item => {\n                        if (item.id == action.payload.item.id) {\n                            return action.payload.item\n                        } else {\n                            return item\n                        }\n                    }),\n                }\n            }\n        }\n        case FILES_SAVE_ERROR: {\n            return {\n                ...state,\n                saveStatus: 'ok',\n            }\n        }\n\n        case FILES_DELETE_START: {\n            return {\n                ...state,\n            }\n        }\n        case FILES_DELETE_SUCCESS: {\n            let newItems = []\n            state.items.forEach(item => {\n                if (item.id != action.payload.id) {\n                    newItems.push(item)\n                }\n            })\n            return {\n                ...state,\n                items: newItems,\n            }\n        }\n        case FILES_DELETE_ERROR: {\n            return {\n                ...state,\n            }\n        }\n        \n        default:\n            return state\n    }\n}\n","/Users/tpmanc/Sites/backup-frontend/src/pages/database-view.js",["239","240"],"import { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useParams } from \"react-router-dom\"\nimport { databaseBackupsLoad } from '../store/database-backups/actions'\n\nimport { Notification } from 'rsuite'\nimport { Panel } from 'rsuite'\nimport { Table } from 'rsuite'\nimport { Icon } from 'rsuite'\nimport { IconButton } from 'rsuite'\n\nexport default function DatabaseView() {\n    const dispatch = useDispatch()\n    let { id } = useParams()\n    const { Column, HeaderCell, Cell } = Table\n\n    const backupsRequestStatus = useSelector(state => state.databaseBackups.status)\n    const backups = useSelector(state => state.databaseBackups.item)\n\n    useEffect(() => {\n        dispatch(\n            databaseBackupsLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n    }, [id])\n\n    const onError = (message) => {\n        Notification.error({\n            title: 'Error!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n    const success = (message) => {\n        Notification.success({\n            title: 'Success!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n\n    const renderBackups = () => {\n        return <Table\n            data={backups}\n            onRowClick={data => {}}\n        >\n            <Column width={70} align=\"center\">\n            <HeaderCell>Id</HeaderCell>\n            <Cell dataKey=\"id\" />\n            </Column>\n\n            <Column flexGrow={1}>\n            <HeaderCell>Name</HeaderCell>\n            <Cell dataKey=\"name\" />\n            </Column>\n\n            <Column width={200} fixed=\"right\">\n                <HeaderCell>Action</HeaderCell>\n\n                <Cell>\n                    {rowData => {\n                    function deleteAction() {\n                        dispatch(\n                            // filesDelete(\n                            //     rowData.id,\n                            //     () => {\n                            //         success('Files Backup Removed')\n                            //     },\n                            //     onError,\n                            // )\n                        )\n                    }\n                    return (\n                        <span>\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"trash2\"/> } onClick={deleteAction} />\n                        </span>\n                    );\n                    }}\n                </Cell>\n            </Column>\n        </Table>\n    }\n\n    return (\n        <div>\n            <h3>Backups</h3>\n\n            <Panel bordered>\n                {\n                    (backupsRequestStatus === 'loading')\n                        ? <div>loading</div>\n                        : renderBackups()\n                }\n            </Panel>\n        </div>\n    )\n}","/Users/tpmanc/Sites/backup-frontend/src/pages/files-view.js",["241","242"],"import { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useParams } from \"react-router-dom\"\nimport { filesBackupsLoad } from '../store/files-backups/actions'\n\nimport { Notification } from 'rsuite'\nimport { Panel } from 'rsuite'\nimport { Table } from 'rsuite'\nimport { Icon } from 'rsuite'\nimport { IconButton } from 'rsuite'\n\nexport default function FilesView() {\n    const dispatch = useDispatch()\n    let { id } = useParams()\n    const { Column, HeaderCell, Cell } = Table\n\n    const backupsRequestStatus = useSelector(state => state.filesBackups.status)\n    const backups = useSelector(state => state.filesBackups.items)\n\n    useEffect(() => {\n        dispatch(\n            filesBackupsLoad(\n                id,\n                () => {},\n                onError,\n            )\n        )\n    }, [id])\n\n    const onError = (message) => {\n        Notification.error({\n            title: 'Error!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n    const success = (message) => {\n        Notification.success({\n            title: 'Success!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n\n    const renderBackups = () => {\n        return <Table\n            data={backups}\n            onRowClick={data => {}}\n        >\n            <Column width={70} align=\"center\">\n            <HeaderCell>Id</HeaderCell>\n            <Cell dataKey=\"id\" />\n            </Column>\n\n            <Column flexGrow={1}>\n            <HeaderCell>Name</HeaderCell>\n            <Cell dataKey=\"name\" />\n            </Column>\n\n            <Column width={200} fixed=\"right\">\n                <HeaderCell>Action</HeaderCell>\n\n                <Cell>\n                    {rowData => {\n                    function deleteAction() {\n                        dispatch(\n                            // filesDelete(\n                            //     rowData.id,\n                            //     () => {\n                            //         success('Files Backup Removed')\n                            //     },\n                            //     onError,\n                            // )\n                        )\n                    }\n                    return (\n                        <span>\n                            <IconButton size=\"xs\" icon={ <Icon icon=\"trash2\"/> } onClick={deleteAction} />\n                        </span>\n                    );\n                    }}\n                </Cell>\n            </Column>\n        </Table>\n    }\n\n    return (\n        <div>\n            <h3>Backups</h3>\n\n            <Panel bordered>\n                {\n                    (backupsRequestStatus === 'loading')\n                        ? <div>loading</div>\n                        : renderBackups()\n                }\n            </Panel>\n        </div>\n    )\n}","/Users/tpmanc/Sites/backup-frontend/src/store/database-backups/reducer.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/database-backups/actions.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/database-backups/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/files-backups/reducer.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/files-backups/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/files-backups/actions.js",[],"/Users/tpmanc/Sites/backup-frontend/src/store/profile/reducer.js",["243","244","245"],"import {\n    PROFILE_LOAD_START,\n    PROFILE_LOAD_SUCCESS,\n    PROFILE_LOAD_ERROR,\n    PROFILE_LOGIN_START,\n    PROFILE_LOGIN_SUCCESS,\n    PROFILE_LOGIN_ERROR,\n    PROFILE_REGISTER_START,\n    PROFILE_REGISTER_SUCCESS,\n    PROFILE_REGISTER_ERROR,\n    PROFILE_LOGOUT_START,\n    PROFILE_LOGOUT_SUCCESS,\n    PROFILE_LOGOUT_ERROR,\n} from './const'\n\nconst initialState = {\n    status: 'init',\n    profile: null,\n    token: null,\n    expiresAt: null,\n}\n\nexport function profileReducer(state = initialState, action) {\n    switch (action.type) {\n        case PROFILE_LOGIN_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case PROFILE_LOGIN_SUCCESS: {\n            return {\n                ...state,\n                status: 'loaded',\n                profile: action.payload.profile,\n                token: action.payload.token,\n                expiresAt: new Date(action.payload.expiresAt),\n            }\n        }\n        case PROFILE_LOGIN_ERROR: {\n            return {\n                ...state,\n                status: 'error',\n                profile: null,\n                token: null,\n                expiresAt: null,\n            }\n        }\n\n        case PROFILE_LOAD_START: {\n            return {\n                ...state,\n                status: 'loading',\n            }\n        }\n        case PROFILE_LOAD_SUCCESS: {\n            return {\n                ...state,\n                status: 'loaded',\n                profile: action.payload.profile,\n            }\n        }\n        case PROFILE_LOAD_ERROR: {\n            return {\n                ...state,\n                status: 'error',\n                profile: null,\n                token: null,\n                expiresAt: null,\n            }\n        }\n\n        case PROFILE_LOGOUT_START: {\n            return state\n        }\n        case PROFILE_LOGOUT_SUCCESS: {\n            return {\n                ...state,\n                profile: null,\n                token: null,\n                expiresAt: null,\n\n            }\n        }\n        case PROFILE_LOGOUT_ERROR: {\n            return state\n        }\n\n        default:\n            return state\n    }\n}\n","/Users/tpmanc/Sites/backup-frontend/src/store/profile/const.js",[],"/Users/tpmanc/Sites/backup-frontend/src/pages/login.js",["246","247"],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { profileLogin } from '../store/profile/actions'\n\nimport { Table } from 'rsuite'\nimport { Button } from 'rsuite'\nimport { Panel } from 'rsuite'\nimport { Notification } from 'rsuite'\nimport { Form, FormGroup, FormControl, ControlLabel, HelpBlock } from 'rsuite'\n\nexport default function LoginPage() {\n    const dispatch = useDispatch()\n\n    // const postStatus = useSelector(state => state.projects.status)\n    // const authToken = useSelector(state => state.profile.token)\n    \n    const [ login, setLogin ] = useState('')\n    const [ password, setPassword ] = useState('')\n\n    const onLoginChanged = value => setLogin(value)\n    const onPasswordChanged = value => setPassword(value)\n\n    useEffect(() => {\n    })\n    \n    const loginSubmit = () => {\n        dispatch(\n            profileLogin(\n                {\n                    login,\n                    password,\n                },\n                () => {\n                    Notification.success({\n                        title: 'Success!',\n                        placement: 'topStart',\n                        description: 'Ok',\n                    })\n                },\n                onError\n            )\n        )\n    }\n    const onError = (message) => {\n        Notification.error({\n            title: 'Error!',\n            placement: 'topStart',\n            description: message,\n        })\n    }\n\n    return (\n        <div>\n            <h3>Login To Profile</h3>\n\n            <Panel bordered>\n                <Form fluid>\n                    <FormGroup>\n                        <ControlLabel>E-mail</ControlLabel>\n                        <FormControl name=\"email\" placeholder=\"Email\" onChange={onLoginChanged} value={login} />\n                        <HelpBlock>Required</HelpBlock>\n                    </FormGroup>\n                    <FormGroup>\n                        <ControlLabel>Password</ControlLabel>\n                        <FormControl name=\"password\" placeholder=\"Password\" onChange={onPasswordChanged} value={password} />\n                        <HelpBlock>Required</HelpBlock>\n                    </FormGroup>\n                </Form>\n\n                <Button onClick={loginSubmit} color=\"green\">\n                    Login\n                </Button>\n            </Panel>\n        </div>\n    )\n}","/Users/tpmanc/Sites/backup-frontend/src/store/profile/actions.js",["248","249","250"],"import {\n    PROFILE_LOAD_START,\n    PROFILE_LOAD_SUCCESS,\n    PROFILE_LOAD_ERROR,\n    PROFILE_LOGIN_START,\n    PROFILE_LOGIN_SUCCESS,\n    PROFILE_LOGIN_ERROR,\n    PROFILE_REGISTER_START,\n    PROFILE_REGISTER_SUCCESS,\n    PROFILE_REGISTER_ERROR,\n    PROFILE_LOGOUT_START,\n    PROFILE_LOGOUT_SUCCESS,\n    PROFILE_LOGOUT_ERROR,\n} from './const'\nimport { client } from '../../api/client'\nimport axios from 'axios'\nimport { jwtHelper } from '../../helpers/jwtHelper'\nimport { axiosHelper } from '../../helpers/axios-helper'\n  \nexport const profileLogin = ({login, password}, callback, onError) => {\n    return dispatch => {\n      dispatch(profileLoginStart())\n  \n      axios\n        .post(client.getApiUrl() + '/login', {\n            email: login,\n            password,\n        })\n        .then(res => {\n            dispatch(\n                profileLoginFinish({\n                    status: 'ok',\n                    profile: res.data.profile,\n                    token: res.data.token,\n                    expiresAt: res.data.expires_at,\n                })\n            )\n            jwtHelper.setToken(res.data.token)\n            callback()\n        })\n        .catch(err => {\n            dispatch(profileLoginError())\n            jwtHelper.removeToken()\n            onError(err.message)\n        })\n    }\n}\nconst profileLoginStart = res => ({\n    type: PROFILE_LOGIN_START,\n    payload: {\n        ...res\n    }\n})\nconst profileLoginFinish = res => ({\n    type: PROFILE_LOGIN_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst profileLoginError = res => ({\n    type: PROFILE_LOGIN_ERROR,\n    payload: {\n        ...res\n    }\n})\n\nexport const profileLoad = (onSuccess, onError) => {\n    if (jwtHelper.getToken() !== null) {\n        return dispatch => {\n            dispatch(profileLoadStart())\n        \n            axiosHelper.get(\n                client.getApiUrl() + '/profile',\n                (res) => {\n                    dispatch(\n                        profileLoadFinish({\n                            status: 'ok',\n                            profile: res.data.profile,\n                        })\n                    )\n                    onSuccess()\n                },\n                (err) => {\n                    dispatch(profileLoadError())\n                    jwtHelper.removeToken()\n                    onError(err.message)\n                },\n            )\n        }\n    } else {\n        return dispatch => {}\n    }\n}\nconst profileLoadStart = res => ({\n    type: PROFILE_LOAD_START,\n    payload: {\n        ...res\n    }\n})\nconst profileLoadFinish = res => ({\n    type: PROFILE_LOAD_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst profileLoadError = res => ({\n    type: PROFILE_LOAD_ERROR,\n    payload: {\n        ...res\n    }\n})\n\nexport const profileLogout = (onSuccess, onError) => {\n    if (jwtHelper.getToken() !== null) {\n        return dispatch => {\n            dispatch(profileLogoutStart())\n        \n            axiosHelper.post(\n                client.getApiUrl() + '/logout',\n                (res) => {\n                    dispatch(\n                        profileLogoutFinish()\n                    )\n                    onSuccess()\n                },\n                (err) => {\n                    dispatch(profileLogoutError())\n                    onError(err.message)\n                },\n            )\n        }\n    } else {\n        return dispatch => {}\n    }\n}\nconst profileLogoutStart = res => ({\n    type: PROFILE_LOGOUT_START,\n    payload: {\n        ...res\n    }\n})\nconst profileLogoutFinish = res => ({\n    type: PROFILE_LOGOUT_SUCCESS,\n    payload: {\n        ...res\n    }\n})\nconst profileLogoutError = res => ({\n    type: PROFILE_LOGOUT_ERROR,\n    payload: {\n        ...res\n    }\n})\n","/Users/tpmanc/Sites/backup-frontend/src/helpers/jwtHelper.js",[],"/Users/tpmanc/Sites/backup-frontend/src/helpers/axios-helper.js",["251"],"import axios from 'axios'\nimport { jwtHelper } from './jwtHelper'\n\nclass AxiosHelper {\n    constructor () {}\n\n    getHeaders () {\n        let headers = {\n            headers: {}\n        }\n        const token = jwtHelper.getToken()\n        if (token !== null) {\n            headers['headers']['Authorization'] = `Bearer ${token}`\n        }\n\n        return headers\n    }\n\n    get (url, onSuccess, onError) {\n        axios\n            .get(url, this.getHeaders())\n            .then(res => {\n                if (onSuccess !== undefined) {\n                    onSuccess(res)\n                }\n            })\n            .catch(err => {\n                if (onError !== undefined) {\n                    onError(err)\n                }\n            })\n    }\n    post (url, body, onSuccess, onError) {\n        axios\n            .get(url, body, this.getHeaders())\n            .then(res => {\n                if (onSuccess !== undefined) {\n                    onSuccess()\n                }\n            })\n            .catch(err => {\n                if (onError !== undefined) {\n                    onError(err.message)\n                }\n            })\n    }\n}\n\nexport const axiosHelper = new AxiosHelper()","/Users/tpmanc/Sites/backup-frontend/src/components/auth-route.js",[],"/Users/tpmanc/Sites/backup-frontend/src/components/app-sidebar/sidebar.js",["252","253","254"],"import React from 'react'\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\"\nimport { profileLogout } from '../../store/profile/actions'\n\nimport 'rsuite/dist/styles/rsuite-default.css'\nimport { Navbar } from 'rsuite'\nimport { Sidebar, Sidenav } from 'rsuite';\nimport { Nav, Dropdown } from 'rsuite'\nimport { Icon } from 'rsuite'\n\nimport './app-sidebar.css'\n\nfunction AppSidebar() {\n  const dispatch = useDispatch()\n  const profile = useSelector(state => state.profile.profile)\n\n  useEffect(() => {})\n\n  const headerStyles = {\n    padding: 18,\n    fontSize: 16,\n    height: 56,\n    background: '#34c3ff',\n    color: ' #fff',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden'\n  }\n  \n  const iconStyles = {\n    width: 56,\n    height: 56,\n    lineHeight: '56px',\n    textAlign: 'center'\n  }\n\n  const expand = true\n\n  const logoutRun = () => {\n    dispatch(\n      profileLogout(\n       () => {},\n       (err) => {\n         alert(err)\n       },\n      )\n    )\n  }\n\n  const NavToggle = ({ expand, onChange }) => {\n    return (\n      <Navbar appearance=\"subtle\" className=\"nav-toggle\">\n        <Navbar.Body>\n          <Nav>\n            <Dropdown\n              placement=\"topStart\"\n              trigger=\"click\"\n              renderTitle={children => {\n                return <Icon style={iconStyles} icon=\"cog\" />;\n              }}\n            >\n              <Dropdown.Item onClick={logoutRun}>Sign out</Dropdown.Item>\n            </Dropdown>\n            <span className=\"profile\">\n              { profile !== null ? profile.email : '' }\n            </span>\n          </Nav>\n  \n          <Nav pullRight>\n            <Nav.Item onClick={onChange} style={{ width: 56, textAlign: 'center' }}>\n              <Icon icon={expand ? 'angle-left' : 'angle-right'} />\n            </Nav.Item>\n          </Nav>\n        </Navbar.Body>\n      </Navbar>\n    );\n  }\n\n  const handleToggle = () => {\n\n  }\n\n  return (\n    <Sidebar\n        style={{ display: 'flex', flexDirection: 'column' }}\n        width={expand ? 260 : 56}\n        collapsible\n        >\n        <Sidenav.Header>\n            <div style={headerStyles}>\n            <Icon icon=\"logo-analytics\" size=\"lg\" style={{ verticalAlign: 0 }} />\n            <span style={{ marginLeft: 12 }}> Backuper</span>\n            </div>\n        </Sidenav.Header>\n        <Sidenav\n            expanded={expand}\n            defaultOpenKeys={['3']}\n            appearance=\"subtle\"\n        >\n            <Sidenav.Body>\n            <Nav>\n                <Nav.Item eventKey=\"1\" icon={<Icon icon=\"dashboard\" />} componentClass={Link} to=\"/\">\n                Dashboard\n                </Nav.Item>\n                <Nav.Item eventKey=\"2\" icon={<Icon icon=\"group\" />} componentClass={Link} to=\"/projects\">\n                Projects\n                </Nav.Item>\n            </Nav>\n            </Sidenav.Body>\n        </Sidenav>\n        <NavToggle expand={expand} onChange={handleToggle} />\n    </Sidebar>\n  );\n}\n\nexport default AppSidebar;\n","/Users/tpmanc/Sites/backup-frontend/src/env.js",[],"/Users/tpmanc/Sites/backup-frontend/src/components/echo.js",["255"],{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":9,"column":3,"nodeType":"262","messageId":"263","endLine":9,"endColumn":7},{"ruleId":"260","severity":1,"message":"264","line":13,"column":8,"nodeType":"262","messageId":"263","endLine":13,"endColumn":15},{"ruleId":"265","severity":1,"message":"266","line":39,"column":6,"nodeType":"267","endLine":39,"endColumn":8,"suggestions":"268"},{"ruleId":"256","replacedBy":"269"},{"ruleId":"258","replacedBy":"270"},{"ruleId":"260","severity":1,"message":"271","line":19,"column":11,"nodeType":"262","messageId":"263","endLine":19,"endColumn":18},{"ruleId":"272","severity":1,"message":"273","line":64,"column":37,"nodeType":"274","messageId":"275","endLine":64,"endColumn":39},{"ruleId":"272","severity":1,"message":"276","line":89,"column":29,"nodeType":"274","messageId":"275","endLine":89,"endColumn":31},{"ruleId":"272","severity":1,"message":"273","line":80,"column":29,"nodeType":"274","messageId":"275","endLine":80,"endColumn":31},{"ruleId":"260","severity":1,"message":"271","line":21,"column":11,"nodeType":"262","messageId":"263","endLine":21,"endColumn":18},{"ruleId":"265","severity":1,"message":"266","line":47,"column":8,"nodeType":"267","endLine":47,"endColumn":12,"suggestions":"277"},{"ruleId":"260","severity":1,"message":"278","line":7,"column":11,"nodeType":"262","messageId":"263","endLine":7,"endColumn":26},{"ruleId":"272","severity":1,"message":"273","line":70,"column":37,"nodeType":"274","messageId":"275","endLine":70,"endColumn":39},{"ruleId":"272","severity":1,"message":"276","line":94,"column":29,"nodeType":"274","messageId":"275","endLine":94,"endColumn":31},{"ruleId":"272","severity":1,"message":"273","line":73,"column":37,"nodeType":"274","messageId":"275","endLine":73,"endColumn":39},{"ruleId":"260","severity":1,"message":"279","line":29,"column":11,"nodeType":"262","messageId":"263","endLine":29,"endColumn":39},{"ruleId":"260","severity":1,"message":"280","line":33,"column":11,"nodeType":"262","messageId":"263","endLine":33,"endColumn":33},{"ruleId":"260","severity":1,"message":"281","line":34,"column":11,"nodeType":"262","messageId":"263","endLine":34,"endColumn":35},{"ruleId":"265","severity":1,"message":"266","line":59,"column":8,"nodeType":"267","endLine":59,"endColumn":12,"suggestions":"282"},{"ruleId":"272","severity":1,"message":"273","line":64,"column":37,"nodeType":"274","messageId":"275","endLine":64,"endColumn":39},{"ruleId":"272","severity":1,"message":"276","line":88,"column":29,"nodeType":"274","messageId":"275","endLine":88,"endColumn":31},{"ruleId":"272","severity":1,"message":"273","line":76,"column":35,"nodeType":"274","messageId":"275","endLine":76,"endColumn":37},{"ruleId":"272","severity":1,"message":"273","line":78,"column":35,"nodeType":"274","messageId":"275","endLine":78,"endColumn":37},{"ruleId":"272","severity":1,"message":"273","line":64,"column":37,"nodeType":"274","messageId":"275","endLine":64,"endColumn":39},{"ruleId":"272","severity":1,"message":"276","line":88,"column":29,"nodeType":"274","messageId":"275","endLine":88,"endColumn":31},{"ruleId":"265","severity":1,"message":"266","line":28,"column":8,"nodeType":"267","endLine":28,"endColumn":12,"suggestions":"283"},{"ruleId":"260","severity":1,"message":"284","line":37,"column":11,"nodeType":"262","messageId":"263","endLine":37,"endColumn":18},{"ruleId":"265","severity":1,"message":"266","line":28,"column":8,"nodeType":"267","endLine":28,"endColumn":12,"suggestions":"285"},{"ruleId":"260","severity":1,"message":"284","line":37,"column":11,"nodeType":"262","messageId":"263","endLine":37,"endColumn":18},{"ruleId":"260","severity":1,"message":"286","line":8,"column":5,"nodeType":"262","messageId":"263","endLine":8,"endColumn":27},{"ruleId":"260","severity":1,"message":"287","line":9,"column":5,"nodeType":"262","messageId":"263","endLine":9,"endColumn":29},{"ruleId":"260","severity":1,"message":"288","line":10,"column":5,"nodeType":"262","messageId":"263","endLine":10,"endColumn":27},{"ruleId":"260","severity":1,"message":"289","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":21},{"ruleId":"260","severity":1,"message":"290","line":5,"column":10,"nodeType":"262","messageId":"263","endLine":5,"endColumn":15},{"ruleId":"260","severity":1,"message":"286","line":8,"column":5,"nodeType":"262","messageId":"263","endLine":8,"endColumn":27},{"ruleId":"260","severity":1,"message":"287","line":9,"column":5,"nodeType":"262","messageId":"263","endLine":9,"endColumn":29},{"ruleId":"260","severity":1,"message":"288","line":10,"column":5,"nodeType":"262","messageId":"263","endLine":10,"endColumn":27},{"ruleId":"291","severity":1,"message":"292","line":5,"column":5,"nodeType":"293","messageId":"294","endLine":5,"endColumn":22},{"ruleId":"260","severity":1,"message":"295","line":5,"column":20,"nodeType":"262","messageId":"263","endLine":5,"endColumn":26},{"ruleId":"260","severity":1,"message":"296","line":6,"column":3,"nodeType":"262","messageId":"263","endLine":6,"endColumn":9},{"ruleId":"260","severity":1,"message":"297","line":7,"column":3,"nodeType":"262","messageId":"263","endLine":7,"endColumn":8},{"ruleId":"260","severity":1,"message":"298","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":12},"no-native-reassign",["299"],"no-negated-in-lhs",["300"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'AppEcho' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["301"],["299"],["300"],"'history' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["302"],"'LOCATION_CHANGE' is defined but never used.","'databasesDeleteRequestStatus' is assigned a value but never used.","'filesSaveRequestStatus' is assigned a value but never used.","'filesDeleteRequestStatus' is assigned a value but never used.",["303"],["304"],"'success' is assigned a value but never used.",["305"],"'PROFILE_REGISTER_START' is defined but never used.","'PROFILE_REGISTER_SUCCESS' is defined but never used.","'PROFILE_REGISTER_ERROR' is defined but never used.","'useSelector' is defined but never used.","'Table' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'io' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"308","fix":"310"},{"desc":"308","fix":"311"},{"desc":"308","fix":"312"},"Update the dependencies array to be: [dispatch]",{"range":"313","text":"314"},"Update the dependencies array to be: [dispatch, id]",{"range":"315","text":"316"},{"range":"317","text":"316"},{"range":"318","text":"316"},{"range":"319","text":"316"},[1096,1098],"[dispatch]",[1508,1512],"[dispatch, id]",[2132,2136],[856,860],[839,843]]